concept: [CurrentTransaction] with properties: [id, date, description, type, status, amount, availableBalance, currentAccount] and behaviors: [getId(), setId(Long), getDate(), setDate(Date), getDescription(), setDescription(String), getType(), setType(String), getStatus(), setStatus(String), getAmount(), setAmount(double), getAvailableBalance(), setAvailableBalance(BigDecimal), getCurrentAccount(), setCurrentAccount(CurrentAccount)]
concept: [SavingsAccount] with properties: [id, accountNumber, accountBalance, savingsTransactionList] and behaviors: [getId(), setId(Long), getAccountNumber(), setAccountNumber(int), getAccountBalance(), setAccountBalance(BigDecimal), getSavingsTransactionList(), setSavingsTransactionList(List)]
concept: [CurrentAccount] with properties: [id, accountNumber, accountBalance, currentTransactionList] and behaviors: [getId(), setId(Long), getAccountNumber(), setAccountNumber(int), getAccountBalance(), setAccountBalance(BigDecimal), getCurrentTransactionList(), setCurrentTransactionList(List)]
concept: [AccountServiceImpl] with properties: [currentAccountDao, savingsAccountDao, userService, transactionService] and behaviors: [createCurrentAccount(), createSavingsAccount(), deposit(String, double, Principal), withdraw(String, double, Principal), accountGen()]
concept: [TransactionServiceImpl] with properties: [userService, currentTransactionDao, savingsTransactionDao, currentAccountDao, savingsAccountDao, recipientDao] and behaviors: [findCurrentTransactionList(String), findSavingsTransactionList(String), saveCurrentDepositTransaction(CurrentTransaction), saveSavingsDepositTransaction(SavingsTransaction), saveCurrentWithdrawTransaction(CurrentTransaction), saveSavingsWithdrawTransaction(SavingsTransaction), betweenAccountsTransfer(String, String, String, CurrentAccount, SavingsAccount), findRecipientList(Principal), saveRecipient(Recipient), findRecipientByName(String), deleteRecipientByName(String), toSomeoneElseTransfer(Recipient, String, String, CurrentAccount, SavingsAccount)]
concept: [AccountController] with properties: [userService, accountService, transactionService] and behaviors: [currentAccount(Model, Principal), savingsAccount(Model, Principal), deposit(Model), depositPOST(String, String, Principal), withdraw(Model), withdrawPOST(String, String, Principal)]
concept: [TransferController] with properties: [transactionService, userService] and behaviors: [betweenAccounts(Model), betweenAccountsPost(String, String, String, Principal), recipient(Model, Principal), recipientPost(Recipient, Principal), recipientEdit(String, Model, Principal), recipientDelete(String, Model, Principal), toSomeoneElse(Model, Principal), toSomeoneElsePost(String, String, String, Principal)]
concept: [User] with properties: [serialVersionUID, userId, username, password, firstName, lastName, aadhaarId, email, phone, enabled, currentAccount, savingsAccount, recipientList, userRoles] and behaviors: [getUserRoles(), setUserRoles(Set), getUserId(), setUserId(Long), getUsername(), setUsername(String), getFirstName(), setFirstName(String), getLastName(), setLastName(String), getEmail(), setEmail(String), getPhone(), setPhone(String), getRecipientList(), setRecipientList(List), getPassword(), setPassword(String), getCurrentAccount(), setCurrentAccount(CurrentAccount), getSavingsAccount(), setSavingsAccount(SavingsAccount), toString(), getAuthorities(), isAccountNonExpired(), isAccountNonLocked(), isCredentialsNonExpired(), isEnabled(), setEnabled(boolean), getAadhaarId(), setAadhaarId(String)]
concept: [AdminController] with properties: [userService, transactionService, roleDao] and behaviors: [profile(Principal, Model), profileActivator(String, Model, Principal), profileSelfDeactivator(String, Model, Principal), currentAccount(String, Model, Principal), savingsAccount(String, Model, Principal), signup(Model, Principal), signupPost(User, Model, Principal)]
concept: [Recipient] with properties: [id, name, email, phone, accountNumber, description, user] and behaviors: [getId(), setId(Long), getName(), setName(String), getEmail(), setEmail(String), getPhone(), setPhone(String), getAccountNumber(), setAccountNumber(String), getDescription(), setDescription(String), getUser(), setUser(User)]
concept: [Role] with properties: [roleId, name, userRoles] and behaviors: [getRoleId(), setRoleId(int), getName(), setName(String), getUserRoles(), setUserRoles(Set)]
concept: [UserServiceImpl] with properties: [logger, userDao, roleDao, passwordEncoder, accountService] and behaviors: [save(User), findByUsername(String), findByEmail(String), createUser(User, Set), checkUserExists(String, String), checkUsernameExists(String), checkEmailExists(String), saveUser(User), findUserList(), enableUser(String), disableUser(String)]
concept: [HomeController] with properties: [PATH, userService, roleDao] and behaviors: [home(), index(), signup(Model), signupPost(User, Model), userFront(Principal, Model), error(), getErrorPath()]
concept: [AdminServiceImpl] with behaviors: [deactivateAccount(String)]
concept: [UserRole] with properties: [userRoleId, user, role] and behaviors: [getUserRoleId(), setUserRoleId(long), getUser(), setUser(User), getRole(), setRole(Role)]
concept: [Authority] with properties: [serialVersionUID, authority] and behaviors: [getAuthority()]
concept: [UserController] with properties: [userService] and behaviors: [profile(Principal, Model), profilePost(User, Model)]
concept: [RequestFilter] with behaviors: [doFilter(ServletRequest, ServletResponse, FilterChain), init(FilterConfig), destroy()]
concept: [SecurityConfig] with properties: [SALT, PUBLIC_MATCHERS, userSecurityService] and behaviors: [passwordEncoder(), configure(HttpSecurity), configureGlobal(AuthenticationManagerBuilder)]
concept: [Application] with behaviors: [main(String)]
concept: [UserSecurityServiceImpl] with properties: [logger, userDao] and behaviors: [loadUserByUsername(String)]
concept: [AuthorityTest] with behaviors: [test()]
concept: [ApplicationTests] with behaviors: [contextLoads()]
concept: [MavenWrapperDownloader] with properties: [WRAPPER_VERSION, DEFAULT_DOWNLOAD_URL, MAVEN_WRAPPER_PROPERTIES_PATH, MAVEN_WRAPPER_JAR_PATH, PROPERTY_NAME_WRAPPER_URL] and behaviors: [main(String), downloadFileFromURL(String, File)]
